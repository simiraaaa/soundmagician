/*
 *
 * Label改造
 *
 *
 */


/**
 * @scope enchant.Label.prototype
 */
enchant.Label = enchant.Class.create(enchant.Entity, {
    /**
     * @name enchant.Label
     * @class
     * A class for Label object.
     * @constructs
     * @extends enchant.Entity
     */
    initialize: function(text) {
        enchant.Entity.call(this);

        this.text = text || '';
        this.width = 300;
        this.fontsize = 14;
        this.fonttype = 'serif';
        this.font=this.fontsize+"px "+this.fonttype;
        this.textAlign = 'left';

        this._debugColor = '#ff0000';
    },
    /**#nocode+*/
    width: {
        get: function() {
            return this._width;
        },
        set: function(width) {
            this._width = width;
            this._dirty = true;
            // issue #164
            this.updateBoundArea();
        }
    },
    /**#nocode-*/
    /**
     * Text to be displayed.
     * @type String
     */
    text: {
        get: function() {
            return this._text;
        },
        set: function(text) {
            text = '' + text;
            if(this._text === text) {
                return;
            }
            this._text = text;
            text = text.replace(/<(br|BR) ?\/?>/g, '<br/>');
            this._splitText = text.split('<br/>');
            this.updateBoundArea();
            for (var i = 0, l = this._splitText.length; i < l; i++) {
                text = this._splitText[i];
                var metrics = this.getMetrics(text);
                this._splitText[i] = {};
                this._splitText[i].text = text;
                this._splitText[i].height = metrics.height;
            }
        }
    },
    /**
     * Specifies horizontal alignment of text.
     * Can be set according to the format of the CSS 'text-align' property.
     * @type String
     */
    textAlign: {
        get: function() {
            return this._style['text-align'];
        },
        set: function(textAlign) {
            this._style['text-align'] = textAlign;
            this.updateBoundArea();
        }
    },
    /**
     * Font settings.
     * Can be set according to the format of the CSS 'font' property.
     * @type String
     */
    font: {
        get: function() {
            return this._style.font;
        },
        set: function(font) {
            this._style.font = font;
            this.updateBoundArea();
        }
    },

    fontsize: {
        get: function() {
            return this._fontsize;
        },
        set: function(font) {
        	font=font || 14;
            this._fontsize = font+"px";
            this._style.font = this._fontsize+" "+this._fonttype;
            this.updateBoundArea();
        }
    },

    fonttype: {
        get: function() {
            return this._fonttype;
        },
        set: function(font) {
            this._fonttype = font;
            this._style.font = this._fontsize+" "+this._fonttype;
            this.updateBoundArea();
        }
    },
    /**
     * Text color settings.
     * Can be set according to the format of the CSS 'color' property.
     * @type String
     */
    color: {
        get: function() {
            return this._style.color;
        },
        set: function(color) {
            this._style.color = color;
        }
    },
    cvsRender: function(ctx) {
        var x, y = 0;
        var labelWidth = this.width;
        var charWidth, amount, line, text, c, buf, increase, length;
        var bufWidth;
        if (this._splitText) {
            ctx.textBaseline = 'top';
            ctx.font = this.font;
            ctx.fillStyle = this.color || '#000000';
            charWidth = ctx.measureText(' ').width;
            amount = labelWidth / charWidth;
            for (var i = 0, l = this._splitText.length; i < l; i++) {
                line = this._splitText[i];
                text = line.text;
                c = 0;
                while (text.length > c + amount || ctx.measureText(text.slice(c, c + amount)).width > labelWidth) {
                    buf = '';
                    increase = amount;
                    length = 0;
                    while (increase > 0) {
                        if (ctx.measureText(buf).width < labelWidth) {
                            length += increase;
                            buf = text.slice(c, c + length);
                        } else {
                            length -= increase;
                            buf = text.slice(c, c + length);
                        }
                        increase = increase / 2 | 0;
                    }
                    ctx.fillText(buf, 0, y);
                    y += line.height - 1;
                    c += length;
                }
                buf = text.slice(c, c + text.length);
                if (this.textAlign === 'right') {
                    x = labelWidth - ctx.measureText(buf).width;
                } else if (this.textAlign === 'center') {
                    x = (labelWidth - ctx.measureText(buf).width) / 2;
                } else {
                    x = 0;
                }
                ctx.fillText(buf, x, y);
                y += line.height - 1;
            }
        }
    },
    domRender: function(element) {
        if (element.innerHTML !== this._text) {
            element.innerHTML = this._text;
        }
    },
    detectRender: function(ctx) {
        ctx.fillRect(this._boundOffset, 0, this._boundWidth, this._boundHeight);
    },
    updateBoundArea: function() {
        var metrics = this.getMetrics();
        this._boundWidth = metrics.width;
        this._boundHeight = metrics.height;
        if (this.textAlign === 'right') {
            this._boundOffset = this.width - this._boundWidth;
        } else if (this.textAlign === 'center') {
            this._boundOffset = (this.width - this._boundWidth) / 2;
        } else {
            this._boundOffset = 0;
        }
    },
    getMetrics: function(text) {
        var ret = {};
        var div, width, height;
        if (document.body) {
            div = document.createElement('div');
            for (var prop in this._style) {
                if(prop !== 'width' && prop !== 'height') {
                    div.style[prop] = this._style[prop];
                }
            }
            text = text || this._text;
            div.innerHTML = text.replace(/ /g, '&nbsp;');
            div.style.whiteSpace = 'noWrap';
            div.style.lineHeight = 1;
            document.body.appendChild(div);
            ret.height = parseInt(getComputedStyle(div).height, 10) + 1;
            div.style.position = 'absolute';
            ret.width = parseInt(getComputedStyle(div).width, 10) + 1;
            document.body.removeChild(div);
        } else {
            ret.width = this.width;
            ret.height = this.height;
        }
        return ret;
    }
});


/*********/






enchant();

var SPRITE_WIDTH  = ~~320/8;
var SPRITE_HEIGHT = ~~320/3;
var SE_PATH={
		do1:"piano/do1.mp3",
		do1s:"piano/do1s.mp3",
		re:"piano/re.mp3",
		res:"piano/res.mp3",
		mi:"piano/mi.mp3",
		fa:"piano/fa.mp3",
		fas:"piano/fas.mp3",
		so:"piano/so.mp3",
		sos:"piano/sos.mp3",
		ra:"piano/ra.mp3",
		ras:"piano/ras.mp3",
		si:"piano/si.mp3",
		do2:"piano/do2.mp3",
};


//タイトルシーン
var TitleScene = function(){
	var s=new Scene();

    player=Player();
	player.setPosition(10,10);
	map = new Map(16, 16);
	map.image = game.assets['images/map1.png'];
	map.loadData([
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	                        [0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,0,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,115,100,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,100,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,16,17,17,17,17,17,17,17,17,18,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,83,100,85,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,48,49,49,49,49,49,49,49,49,50,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,83,84,84,84,84,84,84,84,84,101,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,83,100,100,100,84,84,85,3,3,3,3,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,101,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,99,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,99,100,100,100,100,100,100,84,84,84,84,84,84,84,84,84,84,84,100,116,116,116,116,116,116,116,116,117,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,1,2,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,0,17,17,17,17,18,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,0,49,49,49,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,0,17,17,17,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0],
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	                    ],[
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,60,61,28,28,107,-1,-1,-1,-1,-1,-1,107,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,28,28,76,77,28,28,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,28,28,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,107,107,107,107,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,107,-1,107,107,-1,-1,-1,28,28,28,28,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,-1,-1,107,-1,-1,28,28,28,-1,-1,28,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,107,107,107,107,107,-1,-1,-1,107,-1,-1,107,107,107,107,107,28,-1,107,107,107,107,107,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,107,107,107,107,107,107,107,107,107,107,107,107,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,107,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,-1,107,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,107,-1,107,-1,-1,-1,-1,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,107,-1,-1,-1,-1,-1,107,107,107,-1,-1,-1,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,107,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,107,-1,-1,107,-1,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,107,-1,-1,107,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,107,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,12,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,28,-1,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,107,12,12,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,12,12,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,28,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,28,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,-1,28,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,28,28,28,28,28,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
	                    ]);
	                    map.collisionData = [
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1]
	                    ];

    s.addChild(map);
	s.addChild(player);
    Grouping(s,[map,player]);

    FieldAdd(s);
    TouchCtrl(s);
    s.onenterframe=function(){
    	if(game.input.touch.leftupstart)game.pushScene(PianoScene());
    	Scroll();
    }
    return s;
};


var PianoScene = function(){
	var s=new Scene();
	KenbansAdd(s);
	var label=new Label("もどる");
	label.fontsize=30;
	label.x=60;
	label.y=60;
	s.addChild(label);
    s.on('touchstart',function(e){
    	if(e.y<SPRITE_HEIGHT*2)game.popScene();
    });
    return s;
};

//
var KenbansAdd=function(s){
	for(var i=0;i<8;i++)s.addChild(Kenbans[Kenbans.name[i]]);
    for(var i=0;i<7;i++)if(Kenbans.names[i])s.addChild(Kenbans[Kenbans.names[i]]);
};

var Kenbans;
var map;
var game;
var player;
var stage;

//状態の定義
var BehaviorTypes = {
    Idle : 0,       // 立ち状態
    Walk : 1,       // 歩き状態
    Attack : 2,     // 攻撃状態
    Damaged : 3,    // 被撃状態
    Dead : 4        // 死亡状態
};

//プレイヤー
var Player = enchant.Class.create(Sprite, {
    initialize : function(){
        Sprite.call(this, 32, 32);
        var image = new Surface(96, 128);
        image.draw(game.assets['images/chara0.png'], 0, 0, 96, 128, 0, 0, 96, 128);
        this.image = image;
        this.x = 8;
        this.y = 0;
        this.atk = 1;
        this.hp = 1;
        this.walkable = true;

        this.behavior = BehaviorTypes.Idle;
        this.direction = 0;
        this.animCount = 1;
        this.damageFlag = false;
        this.jewels = [];

        this.collideWith = [];
        this.control = true;
    },
    onenterframe : function(){
        var input = { x:0, y:0, d:this.direction };
        if (game.input.up ) {
            input.d = this.control ? 3 : 0;
            input.y = this.control ?-1 : 1;
        } else if (game.input.down) {
            input.d = this.control ? 0 : 3;
            input.y = this.control ? 1 :-1;
        } else if (game.input.left) {
            input.d = this.control ? 1 : 2;
            input.x = this.control ? -1: 1;
        } else if (game.input.right) {
            input.d = this.control ? 2 : 1;
            input.x = this.control ? 1 :-1;
        }
        this.animCount ++;
        switch(this.behavior){
            case BehaviorTypes.Idle:
                this.frame = this.direction * 3 + 1;
                this.animCount = 0;
                // 攻撃
                if(game.input.a){
                    this.behavior = BehaviorTypes.Attack;
                    var chara = this;
                    this.tl.delay(2).then(function(){
                        var _x = this.x + (this.direction == 1 ? -16 : (this.direction == 2 ? 16 : 0));
                        var _y = this.y + (this.direction == 3 ? -16 : (this.direction == 0 ? 16 : 0));
                        var enemies = this.findEnemies(_x + 16, _y + 24);
                        enemies.forEach(function(enemy){
                            enemy.damage(chara.atk);
                        });
                    });
                }else if(this.walkable){
                    // 移動
                    this.direction = input.d;
                    if (input.x || input.y) {
                        var _x = this.x + input.x * 16;
                        var _y = this.y + input.y * 16;
                        var enemies = this.findEnemies(_x + 16, _y + 24);

                        if (-8 <= _x && _x < map.width && -16 <= _y && _y < map.height &&
                            !map.hitTest(_x + 16, _y + 16) && enemies.length < 1) {
                                this.behavior = BehaviorTypes.Walk;
                                this.tl.moveTo(_x, _y, 4).then(function(){
                                this.animCount = 0;
                                this.behavior = BehaviorTypes.Idle;
                            });
                        }
                    }
                }
                break;

            case BehaviorTypes.Walk:
                this.frame = this.direction * 3 + (this.animCount % 3);
                break;

            case BehaviorTypes.Attack:
                this.frame = this.direction * 3 + (this.animCount / 2 % 3) + 6;
                if(this.animCount > 5){
                    this.anim = 1;
                    this.behavior = BehaviorTypes.Idle;
                }
                break;

            case BehaviorTypes.Dead:
                this.frame = 1;
                if(this.animCount < 10){
                    this.opacity = (10 - this.animCount) / 10.0;
                }else if(this === player){
                    var gameOver = new Sprite(189, 97);
                    //gameOver.image = game.assets['gameover.png'];
                    gameOver.scale(0.8, 0.8);
                    gameOver.moveTo(-15, 32);
                    this.scene.addChild(gameOver);
                    stage.removeChild(this);
                }else{
                    var stair = new Stair(6);
                    stair.moveTo(this.x + 8, this.y + 16);
                    stage.insertBefore(stair, player);
                    stage.removeChild(this);
                    player.avoid(this);
                }
                break;
        }
        // ダメージを受けたときの点滅
        if(this.damageFlag){
            this.opacity = this.opacity == 0 ? 1 : 0;
        }
    },
    damage : function(atk){
        if( this.behavior != BehaviorTypes.Damaged &&
            this.behavior != BehaviorTypes.Dead){
            this.hp -= atk;
            if(this.hp > 0){
                this.damageFlag = true;
                this.tl.delay(4).then(function(){
                    this.opacity = 1;
                    this.damageFlag = false;
                });
            }else{
                this.behavior = BehaviorTypes.Dead;
            }
            this.animCount = 0;
        }
    },
    avoid : function(enemy){
        var chara = this;
        this.collideWith.some(function(v, i){
            if(enemy == v){
                chara.collideWith.splice(i, 1);
            }
        });
    },
    setPosition : function(x, y){
        this.x = x * 16 - 8;
        this.y = y * 16 - 16;
        return this;
    },
    findEnemies : function(x, y){
        var out = [];
        this.collideWith.forEach(function(item){
            if(item.x < x && x < item.x + item.width &&
                item.y < y && y < item.y + item.height){
                out[out.length] = item;
            }
        });
        return out;
    }
});



//スクロール用にまとめるやつ
var Grouping=function(s,children){
	stage = new Group();
	for(var i=0;i<children.length;i++)stage.addChild(children[i]);
    s.addChild(stage);
}

//mapスクロール
var Scroll=function (){
	var x = Math.min((game.width  - 16) / 2 - player.x, 0);
    var y = Math.min((game.height - 16) / 2 - player.y, 0);
    x = Math.max(game.width,  x + map.width)  - map.width;
    y = Math.max(game.height, y + map.height) - map.height;
    stage.x = x;
    stage.y = y;
}

//画面９分割タッチイベント
var TouchCtrl=function(s){

	s.on('exit',function(){
		game.input.touch.leftupstart   =false;
		game.input.touch.upstart       =false;
		game.input.touch.rightupstart  =false;
		game.input.touch.leftstart     =false;
		game.input.touch.centerstart   =false;
		game.input.touch.rightstart    =false;
		game.input.touch.leftdownstart =false;
		game.input.touch.downstart     =false;
		game.input.touch.rightdownstart=false;
	});

	s.on('touchstart',function(e){
		var size=320/3;
		if(e.x <size){
			if(e.y <size){
				game.input.touch.leftupstart=true;
				game.input.touch.leftup=true;
			}else if(e.y <size*2){
				game.input.touch.leftstart=true;
				game.input.touch.left=true;
			}else{
				game.input.touch.leftdownstart=true;
				game.input.touch.leftdown=true;
			}
		}else if(e.x < size*2){
			if(e.y <size){
				game.input.touch.upstart=true;
				game.input.touch.up=true;
			}else if(e.y <size*2){
				game.input.touch.centerstart=true;
				game.input.touch.center=true;
			}else{
				game.input.touch.downstart=true;
				game.input.touch.down=true;
			}
		}else{
			if(e.y <size){
				game.input.touch.rightupstart=true;
				game.input.touch.rightup=true;
			}else if(e.y <size*2){
				game.input.touch.rightstart=true;
				game.input.touch.right=true;
			}else{
				game.input.touch.rightdownstart=true;
				game.input.touch.rightdown=true;
			}
		}
	});
	s.on('touchmove',function(e){
		var size=320/3;
		game.input.touch.leftup   =false;
		game.input.touch.up       =false;
		game.input.touch.rightup  =false;
		game.input.touch.left     =false;
		game.input.touch.center   =false;
		game.input.touch.right    =false;
		game.input.touch.leftdown =false;
		game.input.touch.down     =false;
		game.input.touch.rightdown=false;
		if(e.x <size){
			if(e.y <size){
				game.input.touch.leftup=true;
			}else if(e.y <size*2){
				game.input.touch.left=true;
			}else{
				game.input.touch.leftdown=true;
			}
		}else if(e.x < size*2){
			if(e.y <size){
				game.input.touch.up=true;
			}else if(e.y <size*2){
				game.input.touch.center=true;
			}else{
				game.input.touch.down=true;
			}
		}else{
			if(e.y <size){
				game.input.touch.rightup=true;
			}else if(e.y <size*2){
				game.input.touch.right=true;
			}else{
				game.input.touch.rightdown=true;
			}
		}
	});
	s.on('touchend',function(){
		game.input.touch={};
	});
}

//フィールドのシーンに追加するような奴
var FieldAdd=function(s){
	var pad = new Pad();
    pad.x = 5;
    pad.y = 215;
    s.addChild(pad);
    s.miniken=new Sprite(30,30);
    s.miniken.image=new Surface(30,30);
    for(var i=0;i<3;i++){
    	s.miniken.image.context.fillStyle="white";
    	s.miniken.image.context.fillRect(i*9,0,9,29);
    	s.miniken.image.context.strokeRect(i*9,0,9,29);
    }
    for(var i=0;i<2;i++){
    	s.miniken.image.context.fillStyle="black";
    	s.miniken.image.context.fillRect(i*9+5,0,7,15);
    }
    s.miniken.x=30;
    s.miniken.y=30;
    s.addChild(s.miniken);
}


window.onload = function() {
    game = new Game();
	game.input.touch={};
	game.preload("piano/do1.mp3",
		"piano/do1s.mp3",
		"piano/re.mp3",
		"piano/res.mp3",
		"piano/mi.mp3",
		"piano/fa.mp3",
		"piano/fas.mp3",
		"piano/so.mp3",
		"piano/sos.mp3",
		"piano/ra.mp3",
		"piano/ras.mp3",
		"piano/si.mp3",
		"piano/do2.mp3",
		"images/chara0.png",
		"images/map1.png");
    game.onload = function() {
	var scene = game.rootScene;

	/*
	 *鍵盤
	 */
	Kenbans= {
            do1:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            do1s:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            re:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            res:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            mi:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            fa:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            fas:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            so:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            sos:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            ra:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            ras:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            si:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            do2:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            name:["do1","re","mi","fa","so","ra","si","do2"],
            names:["do1s","res","","fas","sos","ras"],
            namej:["ド↓","レ","ミ","ファ","ソ","ラ","シ","ド↑"],
            namesj:["ド♯","レ♯","","ファ♯","ソ♯","ラ♯"]
        };

	for(var i=0;i<8;i++){
        sprite=Kenbans[Kenbans.name[i]];
        sprite.image = new Surface(SPRITE_WIDTH+1, SPRITE_HEIGHT+1);
        // canvas 描画
        sprite.image.context.fillStyle = "white";
        sprite.image.context.fillRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
        sprite.image.context.lineWidth=4;
        sprite.image.context.strokeStyle = "black";
        sprite.image.context.strokeRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);

        sprite.x=i*SPRITE_WIDTH;
        sprite.y=SPRITE_HEIGHT*2;
        sprite.otoname=Kenbans.namej[i];
        sprite.sepath=SE_PATH[Kenbans.name[i]];
        sprite.addEventListener('touchstart',function(){
            this.image.context.fillStyle = "blue";
            this.image.context.fillRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
            this.image.context.strokeRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
        	game.assets[this.sepath].clone().play();
            console.log(this.otoname);
        });

        sprite.addEventListener('touchend',function(){
            this.image.context.fillStyle = "white";
            this.image.context.fillRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
            this.image.context.strokeRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
        });
    }
    for(var i=0;i<7;i++){
        if(Kenbans.names[i]){
            sprite=Kenbans[Kenbans.names[i]];
            sprite.image =  new Surface(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2);

            // canvas 描画
            sprite.image.context.fillStyle = "black";
            sprite.image.context.fillRect(~~SPRITE_WIDTH*0.1, 0, SPRITE_WIDTH*0.8, ~~SPRITE_HEIGHT/2);

            sprite.x=i*SPRITE_WIDTH+SPRITE_WIDTH/2;
            sprite.y=SPRITE_HEIGHT*2;
            sprite.otoname=Kenbans.namesj[i];
            sprite.sepath=SE_PATH[Kenbans.names[i]];
            sprite.addEventListener('touchstart',function(){
            	this.image.context.fillStyle="teal";
            	this.image.context.fillRect(~~SPRITE_WIDTH*0.1, 0, SPRITE_WIDTH*0.8, ~~SPRITE_HEIGHT/2);
            	game.assets[this.sepath].clone().play();
                console.log(this.otoname);
            });
            sprite.addEventListener('touchend',function(){
            	this.image.context.fillStyle="black";
            	this.image.context.fillRect(~~SPRITE_WIDTH*0.1, 0, SPRITE_WIDTH*0.8, ~~SPRITE_HEIGHT/2);
            });
        }
    }
    game.replaceScene(TitleScene());

    };

    game.start();
};