/*
 *
 * Label改造
 *
 *
 */


/**
 * @scope enchant.Label.prototype
 */
enchant.Label = enchant.Class.create(enchant.Entity, {
    /**
     * @name enchant.Label
     * @class
     * A class for Label object.
     * @constructs
     * @extends enchant.Entity
     */
    initialize: function(text,x,y) {
        enchant.Entity.call(this);
        this.text = text || '';
        this.width = 300;
        this.fontsize = 'bold 16';
        this.fonttype = 'ＭＳ ゴシック';
        this.font=this.fontsize+" "+this.fonttype;
        this.textAlign = 'left';
        this.color="white";
        this._debugColor = '#ff0000';

        this.x=x===undefined?0:x;
        this.y=y===undefined?0:y;
    },
    /**#nocode+*/
    width: {
        get: function() {
            return this._width;
        },
        set: function(width) {
            this._width = width;
            this._dirty = true;
            // issue #164
            this.updateBoundArea();
        }
    },
    /**#nocode-*/
    /**
     * Text to be displayed.
     * @type String
     */
    text: {
        get: function() {
            return this._text;
        },
        set: function(text) {
            text = '' + text;
            if(this._text === text) {
                return;
            }
            this._text = text;
            text = text.replace(/<(br|BR) ?\/?>/g, '<br/>');
            this._splitText = text.split('<br/>');
            this.updateBoundArea();
            for (var i = 0, l = this._splitText.length; i < l; i++) {
                text = this._splitText[i];
                var metrics = this.getMetrics(text);
                this._splitText[i] = {};
                this._splitText[i].text = text;
                this._splitText[i].height = metrics.height;
            }
        }
    },
    /**
     * Specifies horizontal alignment of text.
     * Can be set according to the format of the CSS 'text-align' property.
     * @type String
     */
    textAlign: {
        get: function() {
            return this._style['text-align'];
        },
        set: function(textAlign) {
            this._style['text-align'] = textAlign;
            this.updateBoundArea();
        }
    },
    /**
     * Font settings.
     * Can be set according to the format of the CSS 'font' property.
     * @type String
     */
    font: {
        get: function() {
            return this._style.font;
        },
        set: function(font) {
            this._style.font = font;
            this.updateBoundArea();
        }
    },

    fontsize: {
        get: function() {
            return this._fontsize;
        },
        set: function(font) {
        	font=font || 14;
            this._fontsize = font+"px";
            this._style.font = this._fontsize+" "+this._fonttype;
            this.updateBoundArea();
        }
    },

    fonttype: {
        get: function() {
            return this._fonttype;
        },
        set: function(font) {
            this._fonttype = font;
            this._style.font = this._fontsize+" "+this._fonttype;
            this.updateBoundArea();
        }
    },
    /**
     * Text color settings.
     * Can be set according to the format of the CSS 'color' property.
     * @type String
     */
    color: {
        get: function() {
            return this._style.color;
        },
        set: function(color) {
            this._style.color = color;
        }
    },
    cvsRender: function(ctx) {
        var x, y = 0;
        var labelWidth = this.width;
        var charWidth, amount, line, text, c, buf, increase, length;
        var bufWidth;
        if (this._splitText) {
            ctx.textBaseline = 'top';
            ctx.font = this.font;
            ctx.fillStyle = this.color || '#000000';
            charWidth = ctx.measureText(' ').width;
            amount = labelWidth / charWidth;
            for (var i = 0, l = this._splitText.length; i < l; i++) {
                line = this._splitText[i];
                text = line.text;
                c = 0;
                while (text.length > c + amount || ctx.measureText(text.slice(c, c + amount)).width > labelWidth) {
                    buf = '';
                    increase = amount;
                    length = 0;
                    while (increase > 0) {
                        if (ctx.measureText(buf).width < labelWidth) {
                            length += increase;
                            buf = text.slice(c, c + length);
                        } else {
                            length -= increase;
                            buf = text.slice(c, c + length);
                        }
                        increase = increase / 2 | 0;
                    }
                    ctx.fillText(buf, 0, y);
                    y += line.height - 1;
                    c += length;
                }
                buf = text.slice(c, c + text.length);
                if (this.textAlign === 'right') {
                    x = labelWidth - ctx.measureText(buf).width;
                } else if (this.textAlign === 'center') {
                    x = (labelWidth - ctx.measureText(buf).width) / 2;
                } else {
                    x = 0;
                }
                ctx.fillText(buf, x, y);
                y += line.height - 1;
            }
        }
    },
    domRender: function(element) {
        if (element.innerHTML !== this._text) {
            element.innerHTML = this._text;
        }
    },
    detectRender: function(ctx) {
        ctx.fillRect(this._boundOffset, 0, this._boundWidth, this._boundHeight);
    },
    updateBoundArea: function() {
        var metrics = this.getMetrics();
        this._boundWidth = metrics.width;
        this._boundHeight = metrics.height;
        if (this.textAlign === 'right') {
            this._boundOffset = this.width - this._boundWidth;
        } else if (this.textAlign === 'center') {
            this._boundOffset = (this.width - this._boundWidth) / 2;
        } else {
            this._boundOffset = 0;
        }
    },
    getMetrics: function(text) {
        var ret = {};
        var div, width, height;
        if (document.body) {
            div = document.createElement('div');
            for (var prop in this._style) {
                if(prop !== 'width' && prop !== 'height') {
                    div.style[prop] = this._style[prop];
                }
            }
            text = text || this._text;
            div.innerHTML = text.replace(/ /g, '&nbsp;');
            div.style.whiteSpace = 'noWrap';
            div.style.lineHeight = 1;
            document.body.appendChild(div);
            ret.height = parseInt(getComputedStyle(div).height, 10) + 1;
            div.style.position = 'absolute';
            ret.width = parseInt(getComputedStyle(div).width, 10) + 1;
            document.body.removeChild(div);
        } else {
            ret.width = this.width;
            ret.height = this.height;
        }
        return ret;
    }
});


/*********/






enchant();

var SPRITE_WIDTH  = ~~320/8;
var SPRITE_HEIGHT = ~~320/3;
var SE_PATH={
		do1:"piano/do1.mp3",
		do1s:"piano/do1s.mp3",
		re:"piano/re.mp3",
		res:"piano/res.mp3",
		mi:"piano/mi.mp3",
		fa:"piano/fa.mp3",
		fas:"piano/fas.mp3",
		so:"piano/so.mp3",
		sos:"piano/sos.mp3",
		ra:"piano/ra.mp3",
		ras:"piano/ras.mp3",
		si:"piano/si.mp3",
		do2:"piano/do2.mp3",
};


var savedata={
		name:"フォルテ",
		level:1,
		gakuhu:["onpa","kanki","kirakira","bunbun","tengoku"],
		exp:0
}
var GAKUHU={
		onpa:{
			name:"音波",
			setumei:"無属性:音波を飛ばして敵を攻撃する",
			mp:0,
			power:1,
			magic:function(){},
			canField:false,
			canSentou:true,
			s:[0,2,4],
			t:[0,15,30]
		},
		mezame:{
			name:"目覚めの歌",
			setumei:"夢の世界から現実に戻る",
			mp:0,
			magic:function(){console.log("mezae")},
			canField:true,
			canSentou:false,
			s:[12,7,5,7,5,0,5,7,12],
			t:[0,8,16,24,32,40,48,55,63]
		},
		kanki:{
			name:"歓喜の歌",
			setumei:"以下の効果を選択。[MP5,HP50%回復]<BR>[MP15,HP全回復]<BR>[MP0,MP50%回復]",
			mp:5,
			magic:function(){},
			canField:false,
			canSentou:true,
			s:[6,6,7,9,9,7,6,4,2,2,4,6,6,4,4,6,6,7,9,9,7,6,4,2,2,4,6,4,2,2],
			t:[0,14,28,41,55,68,82,95,109,124,137,150,163,184,190,217,230,243,255,269,281,294,306,319,333,344,357,370,389,396]
		},
		kirakira:{
			name:"きらきら星",
			setumei:"無属性:以下の効果を選択。[MP3,手裏剣]<BR>[MP30,メテオ]",
			mp:3,
			magic:function(){},
			canField:false,
			canSentou:true,
			power:[3,10],
			s:[0,0,7,7,9,9,7,5,5,4,4,2,2,0,7,7,5,5,4,4,2,7,7,5,5,4,4,2,0,0,7,7,9,9,7,5,5,4,4,2,2,0],
			t:[0,14,27,42,56,70,83,109,123,136,149,161,175,189,217,231,245,258,271,284,298,325,340,352,366,380,394,408,435,450,463,477,491,505,518,544,558,571,584,597,611,624]
		},
		bunbun:{
			name:"ぶんぶんぶん",
			setumei:"無属性:蜂を操り敵を刺しまくる",
			mp:1,
			magic:function(){},
			canField:false,
			canSentou:true,
			power:1.5,
			s:[7,5,4,2,4,5,2,0],
			t:[0,14,28,54,62,69,76,84]
		},
		tengoku:{
			name:"天国と地獄",
			setumei:"火属性:敵を地獄の業火で焼き尽くす。与えたダメージの20%自分のHPを回復する。",
			mp:25,
			magic:function(){},
			power:6,
			canField:false,
			canSentou:true,
			s:[0,0,2,5,4,2,7,7,7,9,4,5,2,2,2,5,4,2,0,12,11,9,7,5,4,2,0,0,2,5,4,2,7,7,7,9,4,5,2,2,2,5,4,2,0,7,2,4,0],
			t:[0,11,23,27,33,38,43,54,64,70,74,79,84,95,105,110,116,121,127,133,139,144,149,155,160,166,171,182,192,197,203,208,213,224,235,240,247,251,257,269,278,284,289,295,302,307,314,318,324]
		}
}

//GAKUHUをループで回すための参照
var g=GAKUHU;
var gakuhus=[g.onpa,g.mezame,g.kanki,g.kirakira,g.bunbun,g.tengoku];
//魔法が発動しているかどうかgakuhusの順番
var isMagicActive=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
var fmn=[];
var smn=[];
var i=0;
for(var k in GAKUHU){
	if(GAKUHU[k].canField)fmn[fmn.length]=k;
	if(GAKUHU[k].canSentou)smn[smn.length]=k;
	GAKUHU[k].number=i;
	i++;
}


var ensou=[];
//タイトルシーン
var TitleScene = function(){
	var s=new Scene();
	scene=s;
    player=Player();
	player.setPosition(10,10);
	map = new Map(16, 16);
	map.image = game.assets['images/map1.png'];
	map.loadData([
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	                        [0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,0,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,115,100,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,100,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,16,17,17,17,17,17,17,17,17,18,3,3,3,3,3,3,3,99,101,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,101,3,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,83,100,85,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,32,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,48,49,49,49,49,49,49,49,49,50,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,99,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,99,100,101,3,3,3,3,3,3,3,3,3,3,3,3,3,3,83,84,84,84,84,84,84,84,84,101,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,83,100,100,100,84,84,85,3,3,3,3,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,101,100,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,99,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,3,3,99,100,100,100,100,100,100,100,100,101,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,99,100,100,100,100,100,100,84,84,84,84,84,84,84,84,84,84,84,100,116,116,116,116,116,116,116,116,117,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,1,2,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,0,17,17,17,17,18,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,0,49,49,49,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,34,3,3,3,32,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,32,0,0],
	                        [0,0,0,17,17,17,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0],
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	                    ],[
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,60,61,28,28,107,-1,-1,-1,-1,-1,-1,107,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,28,28,76,77,28,28,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,28,28,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,107,-1,-1,107,107,107,107,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,107,-1,107,107,-1,-1,-1,28,28,28,28,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,107,-1,-1,107,-1,-1,28,28,28,-1,-1,28,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,107,107,107,107,107,-1,-1,-1,107,-1,-1,107,107,107,107,107,28,-1,107,107,107,107,107,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,107,107,107,107,107,107,107,107,107,107,107,107,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,107,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,-1,107,-1,107,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,107,-1,107,-1,-1,-1,-1,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,107,-1,-1,-1,-1,-1,107,107,107,-1,-1,-1,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,107,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,107,107,107,107,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,107,-1,-1,107,-1,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,107,-1,-1,107,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,107,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,12,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,28,-1,28,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,107,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,107,12,12,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,12,12,-1,-1,107,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,28,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,28,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,-1,28,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,28,28,28,28,28,-1,28,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,28,28,28,28,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
	                        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
	                    ]);
	                    map.collisionData = [
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
	                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1]
	                    ];
	var npcs=[];
	npcs[0]=new NPC(25,["あなたの持ってる鍵盤で、そこの宝箱に入ってる楽譜を演奏してみて。","鍵盤は画面の左上をタッチすると使えるよ。あと楽譜は画面の右側の♪をタッチすると見れるよ。"]);
	npcs[0].setPosition(20,30);

	npcs[1]=new Takara("mezame",23,29);
    Grouping([map,npcs[0],npcs[1],player]);
    FieldAdd();
    TouchCtrl();
    MessageWindowCt(["ここはどこだろう……。","……とりあえず、抜け出そう。"]);
    s.onenterframe=function(){
    	if(s.isMessage){
    		if(game.input.touch.start)MessageNext();
    	}else{
    		if(game.input.touch.leftupstart)game.pushScene(PianoScene());
    		else if(game.input.touch.rightstart)game.pushScene(GakuhuSelectScene());
    	}
    }
    return s;
};

var KenbansAllTouchEnd=function(){
	for(var i=0;i<13;i++)Kenbans.n[i].ontouchend();
};

var PianoScene = function(){
	var s=new Scene();
	KenbansAdd(s);
	ModoruCreator(s,160,120);
	FieldMagicList(s);
    s.on('touchstart',function(e){
    	if(e.y<160){
    		ensou.length=0;
    		game.popScene();
    	}
    });
    return s;
};
//見ながら演奏
var MinagaraPianoScene = function(i){
	var s=new Scene();
	KenbansAdd(s);
	ModoruCreator(s,160,120);
    s.on('touchstart',function(e){
    	if(e.y<160){
    		ensou.length=0;
    		KenbansAllTouchEnd();
    		game.popScene();
    	}
    });
	FieldMagicList(s);
    s.n=savedata.gakuhu[i];
    s.nn=i;
    s.i=0;
    s.el=ensou.length;
    s.onenterframe=function(){
    	if(GAKUHU[this.n].s.length>this.i){

    		Kenbans.n[GAKUHU[this.n].s[this.i]].setRed();

			if(this.el<ensou.length){
				if(ensou[ensou.length-1]===GAKUHU[this.n].s[this.i]){
					this.i++;
					this.el=ensou.length;
				}else{
					this.w=WindowCreator(50,150,200,25);
					this.addChild(this.w);
					this.w.tl.delay(30).removeFromScene();
					this.l=new Label("間違えた！最初から！",55,155);
					this.addChild(this.l);
					this.l.tl.delay(30).removeFromScene();
					KenbansAllTouchEnd();
					ensou.length=0;
					this.el=0;
					this.i=0;
				}
			}
    	}
    };
    return s;
};
var AutoPianoScene = function(i){
	var s=new Scene();
	KenbansAdd(s);

	ModoruCreator(s,160,160);
    s.on('touchstart',function(e){
    	if(e.y<SPRITE_HEIGHT*2){
    		KenbansAllTouchEnd();
			ensou.length=0;
			isMagicActive=[].concat(this.copied);
    		game.popScene();
    	}
    });
    s.copied=[].concat(isMagicActive);
    s.c=0;
    s.n=savedata.gakuhu[i];
    s.nn=i;
    s.i=0;
    s.onenterframe=function(){

    	if(this.i>=GAKUHU[this.n].t.length){
    		if(this.c===GAKUHU[this.n].t[this.i-1]+30){
        		KenbansAllTouchEnd();
    			ensou.length=0;
    			isMagicActive=[].concat(this.copied);
    			game.popScene();
    		}
    	}else if(this.c===GAKUHU[this.n].t[this.i]){
    		if(this.i>0){
    			Kenbans.n[GAKUHU[this.n].s[this.i-1]].ontouchend();
    		}
    		Kenbans.n[GAKUHU[this.n].s[this.i]].ontouchstart();
			Kenbans.n[GAKUHU[this.n].s[this.i]].setRed();
    		this.i++;
    	}
    	this.c++;
    };

    return s;
};

var GakuhuSelectScene = function(){
	var s=new Scene();
	TouchCtrl(s);
	var x=15;
	var y=25;
	s.addChild(WindowCreator(x,y,75,50));
	s.addChild(new Label("見ながら<br>演奏",x+5,y+5));

	y=y+106;
	s.addChild(WindowCreator(x,y,75,50));
	s.addChild(new Label("楽譜を<br>見る",x+5,y+5));

	x=320/3;
	y=0;
	s.addChild(WindowCreator(x,y,x,x*2));
	s.addChild(new Label("説明",x+2,y+2));
	s.setumeiLabel=new Label("",x+2,y+22);
	s.setumeiLabel.width=x-20;
	s.addChild(s.setumeiLabel);


	x=x+25;
	y=x*2-15;
	ModoruCreator(s,x,y);

	s.gakuhu=[];
	for(var i=0;i<savedata.gakuhu.length;i++){
		s.gakuhu[i]=new Sprite(108,18);
		s.gakuhu[i].image=new Surface(108,18);
		s.gakuhu[i].x=320/3*2;
		s.gakuhu[i].y=17*i;
		s.gakuhu[i].image.context.fillStyle="black";
		s.gakuhu[0].image.context.fillStyle="#005";
		s.gakuhu[i].image.context.strokeStyle="white";
		RoundRect(s.gakuhu[i].image,0,0,106,17,4,1);
		RoundRect(s.gakuhu[i].image,0,0,106,17,4,0);
		s.gakuhu[i].image.context.fillStyle="white";
		s.gakuhu[i].image.context.textBaseline = 'top';
		s.gakuhu[i].image.context.font="bold 16px 'ＭＳ ゴシック'";
		s.gakuhu[i].image.context.fillText(GAKUHU[savedata.gakuhu[i]].name,0,0,100);
		s.gakuhu[i].number=i;

		s.gakuhu[i].ontouchstart=function(){
			s.gakuhu[s.iti].image.context.fillStyle="black";
			s.gakuhu[s.iti].image.context.strokeStyle="white";
			RoundRect(s.gakuhu[s.iti].image,0,0,106,17,4,1);
			RoundRect(s.gakuhu[s.iti].image,0,0,106,17,4,0);
			s.gakuhu[s.iti].image.context.fillStyle="white";
			s.gakuhu[s.iti].image.context.textBaseline = 'top';
			s.gakuhu[s.iti].image.context.font="bold 16px 'ＭＳ ゴシック'";
			s.gakuhu[s.iti].image.context.fillText(GAKUHU[savedata.gakuhu[s.iti]].name,0,0,100);
			s.iti=this.number;
			s.gakuhu[s.iti].image.context.fillStyle="#000055";
			s.gakuhu[s.iti].image.context.strokeStyle="white";
			RoundRect(s.gakuhu[s.iti].image,0,0,106,17,4,1);
			RoundRect(s.gakuhu[s.iti].image,0,0,106,17,4,0);
			s.gakuhu[s.iti].image.context.fillStyle="white";
			s.gakuhu[s.iti].image.context.textBaseline = 'top';
			s.gakuhu[s.iti].image.context.font="bold 16px 'ＭＳ ゴシック'";
			s.gakuhu[s.iti].image.context.fillText(GAKUHU[savedata.gakuhu[s.iti]].name,0,0,100);
			s.setumeiLabel.text=GAKUHU[savedata.gakuhu[this.number]].name+"<BR>消費MP"+GAKUHU[savedata.gakuhu[this.number]].mp+"<BR>"+GAKUHU[savedata.gakuhu[this.number]].setumei;
		}

		s.addChild(s.gakuhu[i]);

	}
	s.iti=0;
	s.setumeiLabel.text=GAKUHU.onpa.name+"<BR>消費MP"+GAKUHU.onpa.mp+"<BR>"+GAKUHU.onpa.setumei;
	s.onenterframe=function(){
		if(game.input.touch.downstart)game.popScene();
		else if(game.input.touch.leftstart)game.replaceScene(AutoPianoScene(this.iti));
		else if(game.input.touch.leftupstart)game.replaceScene(MinagaraPianoScene(this.iti));
	};

    return s;
};
var FieldMagicList=function(s){
	s.gakuhu=[];
	for(var i=0;i<fmn.length;i++){
		s.gakuhu[i]=new Sprite(108,18);
		s.gakuhu[i].image=new Surface(108,18);
		s.gakuhu[i].x=320/3+~~(i/3)*320/3;
		s.gakuhu[i].y=17*(i%3)*2+~~(i/3)%2*17;
		s.gakuhu[i].image.context.fillStyle="black";
		s.gakuhu[i].image.context.strokeStyle="white";
		RoundRect(s.gakuhu[i].image,0,0,106,17,4,1);
		RoundRect(s.gakuhu[i].image,0,0,106,17,4,0);
		s.gakuhu[i].image.context.fillStyle="white";
		s.gakuhu[i].image.context.textBaseline = 'top';
		s.gakuhu[i].image.context.font="bold 16px 'ＭＳ ゴシック'";
		s.gakuhu[i].image.context.fillText(GAKUHU[fmn[i]].name,0,0,100);
		s.gakuhu[i].name=fmn[i];
		s.gakuhu[i].visible=false;
		s.gakuhu[i].ontouchstart=function(){
			GAKUHU[this.name].magic();
		}
		s.gakuhu[i].onenterframe=function(){
	    	if(game.input.down||game.input.left||game.input.right||game.input.up)this.visible=false;
	    	else if(isMagicActive[GAKUHU[this.name].number]) this.visible=true;
		}
		s.addChild(s.gakuhu[i]);

	}
};



//
var KenbansAdd=function(s){
	for(var i=0;i<8;i++)s.addChild(Kenbans[Kenbans.name[i]]);
    for(var i=0;i<7;i++)if(Kenbans.names[i])s.addChild(Kenbans[Kenbans.names[i]]);
};

var ModoruCreator=function(s,x,y){
	s.addChild(WindowCreator(x,y,50,30));
	s.addChild(new Label("戻る",x+5,y+5));
};


var Kenbans;
var map;
var game;
var player;
var stage;
var scene;

//状態の定義
var JYOUTAI = {
    Idle : 0,       // 立ち状態
    Walk : 1,       // 歩き状態
    Attack : 2,     // 攻撃状態
    Damaged : 3,    // 被撃状態
    Dead : 4        // 死亡状態
};

//プレイヤー
var Player = enchant.Class.create(Sprite, {
    initialize : function(){
        Sprite.call(this, 32, 32);
        var image = new Surface(96, 128);
        image.draw(game.assets['images/chara0.png'], 0, 0, 96, 128, 0, 0, 96, 128);
        this.image = image;
        this.x = 8;
        this.y = 0;
        this.atk = 1;
        this.hp = 1;
        this.canWalk = true;

        this.jyoutai = JYOUTAI.Idle;
        this.direction = 0;
        this.animCount = 1;
        this.damageFlag = false;
        this.jewels = [];

        this.collideWith = [];
        this.control = true;
    },
    onenterframe : function(){
        var input = { x:0, y:0, d:this.direction };
        if (game.input.up ) {
            input.d = this.control ? 3 : 0;
            input.y = this.control ?-1 : 1;
        } else if (game.input.down) {
            input.d = this.control ? 0 : 3;
            input.y = this.control ? 1 :-1;
        } else if (game.input.left) {
            input.d = this.control ? 1 : 2;
            input.x = this.control ? -1: 1;
        } else if (game.input.right) {
            input.d = this.control ? 2 : 1;
            input.x = this.control ? 1 :-1;
        }
        this.animCount ++;
        switch(this.jyoutai){
            case JYOUTAI.Idle:
                this.frame = this.direction * 3 + 1;
                this.animCount = 0;
                // 攻撃
                if(game.input.a){
                    this.jyoutai = JYOUTAI.Attack;
                    var chara = this;
                    this.tl.delay(2).then(function(){
                        var _x = this.x + (this.direction == 1 ? -16 : (this.direction == 2 ? 16 : 0));
                        var _y = this.y + (this.direction == 3 ? -16 : (this.direction == 0 ? 16 : 0));
                        var enemies = this.findEnemies(_x + 16, _y + 24);
                        enemies.forEach(function(enemy){
                            enemy.damage(chara.atk);
                        });
                    });
                }else if(this.canWalk){
                    // 移動
                    this.direction = input.d;
                    if (input.x || input.y) {
                        var _x = this.x + input.x * 16;
                        var _y = this.y + input.y * 16;
                        var enemies = this.findEnemies(_x + 16, _y + 24);

                        if (-8 <= _x && _x < map.width && -16 <= _y && _y < map.height &&
                            !map.hitTest(_x + 16, _y + 16) && enemies.length < 1) {
                            this.jyoutai = JYOUTAI.Walk;
                            this.tl.moveTo(_x, _y, 1).then(function(){
                                this.animCount = 0;
                                this.jyoutai = JYOUTAI.Idle;
                            });

                        }
                    }
                }
                break;

            case JYOUTAI.Walk:
                this.frame = this.direction * 3 + (this.animCount % 3);
                break;

            case JYOUTAI.Attack:
                this.frame = this.direction * 3 + (this.animCount / 2 % 3) + 6;
                if(this.animCount > 5){
                    this.anim = 1;
                    this.jyoutai = JYOUTAI.Idle;
                }
                break;

            case JYOUTAI.Dead:
                this.frame = 1;
                if(this.animCount < 10){
                    this.opacity = (10 - this.animCount) / 10.0;
                }else if(this === player){
                    var gameOver = new Sprite(189, 97);
                    //gameOver.image = game.assets['gameover.png'];
                    gameOver.scale(0.8, 0.8);
                    gameOver.moveTo(-15, 32);
                    this.scene.addChild(gameOver);
                    stage.removeChild(this);
                }else{
                    var stair = new Stair(6);
                    stair.moveTo(this.x + 8, this.y + 16);
                    stage.insertBefore(stair, player);
                    stage.removeChild(this);
                    player.avoid(this);
                }
                break;
        }
        // ダメージを受けたときの点滅
        if(this.damageFlag){
            this.opacity = this.opacity == 0 ? 1 : 0;
        }
    },
    damage : function(atk){
        if( this.jyoutai != JYOUTAI.Damaged &&
            this.jyoutai != JYOUTAI.Dead){
            this.hp -= atk;
            if(this.hp > 0){
                this.damageFlag = true;
                this.tl.delay(4).then(function(){
                    this.opacity = 1;
                    this.damageFlag = false;
                });
            }else{
                this.jyoutai = JYOUTAI.Dead;
            }
            this.animCount = 0;
        }
    },
    avoid : function(enemy){
        var chara = this;
        this.collideWith.some(function(v, i){
            if(enemy == v){
                chara.collideWith.splice(i, 1);
            }
        });
    },
    setPosition : function(x, y){
        this.x = x * 16 - 8;
        this.y = y * 16 - 16;
        return this;
    },
    findEnemies : function(x, y){
        var out = [];
        this.collideWith.forEach(function(item){
            if(item.x < x && x < item.x + item.width &&
                item.y < y && y < item.y + item.height){
                out[out.length] = item;
            }
        });
        return out;
    }
});


//NPC
var NPC = enchant.Class.create(enchant.Sprite, {
    initialize : function(id,text,x,y){
        enchant.Sprite.call(this, 32, 32);
        var image = new Surface(32, 32);
        image.draw(game.assets['images/chara0.png'], (id % 9) * 32, ~~(id/9)*32, 32, 32, 0, 0, 32, 32);
        this.image = image;
        this.talktext=text || ["……。"];
        if(y!==undefined)this.setPosition(x, y);
        player.collideWith.push(this);
    },
    setPosition : function(x, y){
        this.x = x * 16 - 8;
        this.y = y * 16 - 16;
        return this;
    },
    onenterframe : function(){
        if(this.startTalk()){
        	MessageWindowCt(this.talktext);
        }
    },
    startTalk : function(){
        // プレイヤーが上にいるとき, 右にいるとき, 左にいるとき, 下にいるとき
        return  (player.x == this.x && player.y == this.y - 32 && game.input.down) ||
                (player.x == this.x + 16 && player.y == this.y && game.input.left) ||
                (player.x == this.x - 16 && player.y == this.y && game.input.right) ||
                (player.x == this.x && player.y == this.y + 16 && game.input.up);
    }
});

//宝箱
var Takara = enchant.Class.create(enchant.Sprite, {
    initialize : function(item,x,y){
        enchant.Sprite.call(this, 16, 16);
        var image = new Surface(16, 16);
        image.draw(game.assets['images/map1.png'], 11 * 16, 16, 16, 16, 0, 0, 16, 16);
        this.image = image;
        if(y!==undefined)this.setPosition(x, y);
        this.item=item;
        player.collideWith.push(this);
    },
    setPosition : function(x, y){
        this.x = x * 16 ;
        this.y = y * 16 ;
        return this;
    },
    onenterframe : function(){
    	for(var i=0;i<savedata.gakuhu.length;i++){
    		if(this.item===savedata.gakuhu[i]){
    			player.collideWith.splice(player.collideWith.indexOf(this),1);
    			stage.removeChild(this);
    		}
    	}
        if(this.isItemGet()){
			player.collideWith.splice(player.collideWith.indexOf(this),1);
			MessageWindowCt([GAKUHU[this.item].name+"の楽譜を手に入れた!"]);
			var i=savedata.gakuhu.length;
			savedata.gakuhu[i]=this.item;
			game.pushScene(AutoPianoScene(i));
			stage.removeChild(this);
        }
    },
    isItemGet : function(){
        // プレイヤーが上にいるとき, 右にいるとき, 左にいるとき, 下にいるとき
        return  (player.x == this.x - 8 && player.y == this.y - 32 && game.input.down) ||
                (player.x == this.x + 8 && player.y == this.y - 16 && game.input.left) ||
                (player.x == this.x - 24 && player.y == this.y -16  && game.input.right) ||
                (player.x == this.x - 8 && player.y == this.y  && game.input.up);
    }
});





//メッセージウィンドウの
var MessageWindowCt=function(text,s){
	s=s || scene;
	game.input.touch.start=false;
	s.isMessage=true;
	player.canWalk=false;
	s.mst.stack=text;
	s.mst.text=text[0];
	s.mswin.visible=true;
};
//メッセージを次に進める.なかったら消す。
var MessageNext=function(s){
	s=s || scene;
	s.mscount++;
	if(s.mst.stack.length<=s.mscount){
		s.mst.text="";
		s.mst.stack=null;
		s.mscount=0;
		s.isMessage=false;
		player.canWalk=true;
		s.mswin.visible=false;
	}else{
		s.mst.text=s.mst.stack[s.mscount];
	}
}

//スクロール用にまとめるやつ
var Grouping=function(children,s){
	s=s || scene;
	stage = new Group();
	for(var i=0;i<children.length;i++)stage.addChild(children[i]);
	stage.onenterframe=Scroll;
    s.addChild(stage);
}

//mapスクロール
var Scroll=function (){
	var x = Math.min((game.width  - 16) / 2 - player.x, 0);
    var y = Math.min((game.height - 16) / 2 - player.y, 0);
    x = Math.max(game.width,  x + map.width)  - map.width;
    y = Math.max(game.height, y + map.height) - map.height;
    stage.x = x;
    stage.y = y;
}

//画面９分割タッチイベント
var TouchCtrl=function(s){

	s=s || scene;
	game.on('exitframe',function(){
		game.input.touch.start   =false;
		game.input.touch.leftupstart   =false;
		game.input.touch.upstart       =false;
		game.input.touch.rightupstart  =false;
		game.input.touch.leftstart     =false;
		game.input.touch.centerstart   =false;
		game.input.touch.rightstart    =false;
		game.input.touch.leftdownstart =false;
		game.input.touch.downstart     =false;
		game.input.touch.rightdownstart=false;
	});

	s.on('touchstart',function(e){
		game.input.touch.start   =true;
		var size=320/3;
		if(e.x <size){
			if(e.y <size){
				game.input.touch.leftupstart=true;
				game.input.touch.leftup=true;
			}else if(e.y <size*2){
				game.input.touch.leftstart=true;
				game.input.touch.left=true;
			}else{
				game.input.touch.leftdownstart=true;
				game.input.touch.leftdown=true;
			}
		}else if(e.x < size*2){
			if(e.y <size){
				game.input.touch.upstart=true;
				game.input.touch.up=true;
			}else if(e.y <size*2){
				game.input.touch.centerstart=true;
				game.input.touch.center=true;
			}else{
				game.input.touch.downstart=true;
				game.input.touch.down=true;
			}
		}else{
			if(e.y <size){
				game.input.touch.rightupstart=true;
				game.input.touch.rightup=true;
			}else if(e.y <size*2){
				game.input.touch.rightstart=true;
				game.input.touch.right=true;
			}else{
				game.input.touch.rightdownstart=true;
				game.input.touch.rightdown=true;
			}
		}
	});
	s.on('touchmove',function(e){
		var size=320/3;
		game.input.touch.leftup   =false;
		game.input.touch.up       =false;
		game.input.touch.rightup  =false;
		game.input.touch.left     =false;
		game.input.touch.center   =false;
		game.input.touch.right    =false;
		game.input.touch.leftdown =false;
		game.input.touch.down     =false;
		game.input.touch.rightdown=false;
		if(e.x <size){
			if(e.y <size){
				game.input.touch.leftup=true;
			}else if(e.y <size*2){
				game.input.touch.left=true;
			}else{
				game.input.touch.leftdown=true;
			}
		}else if(e.x < size*2){
			if(e.y <size){
				game.input.touch.up=true;
			}else if(e.y <size*2){
				game.input.touch.center=true;
			}else{
				game.input.touch.down=true;
			}
		}else{
			if(e.y <size){
				game.input.touch.rightup=true;
			}else if(e.y <size*2){
				game.input.touch.right=true;
			}else{
				game.input.touch.rightdown=true;
			}
		}
	});
	s.on('touchend',function(){
		game.input.touch.leftup   =false;
		game.input.touch.up       =false;
		game.input.touch.rightup  =false;
		game.input.touch.left     =false;
		game.input.touch.center   =false;
		game.input.touch.right    =false;
		game.input.touch.leftdown =false;
		game.input.touch.down     =false;
		game.input.touch.rightdown=false;
	});
}

//フィールドのシーンに追加するような奴
var FieldAdd=function(s){
	s=s || scene;
	var pad = new Pad();
    pad.x = 5;
    pad.y = 215;
    s.addChild(pad);

    s.minigakuhu=new Sprite(30,30);
    s.minigakuhu.image=new Surface(30,30);
    s.minigakuhu.image.context.fillStyle="white";
    RoundRect(s.minigakuhu.image, 0, 0, 29, 29, 10, 1);
    RoundRect(s.minigakuhu.image, 0, 0, 29, 29, 10, 0);
    s.minigakuhu.image.context.fillStyle="black";
    s.minigakuhu.image.context.font="bold 24px 'ＭＳ ゴシック'";
    s.minigakuhu.image.context.fillText("♪",2,23);
    s.minigakuhu.x=320-50;
    s.minigakuhu.y=160;
    s.minigakuhu.onenterframe=function(){
    	if(game.input.down||game.input.left||game.input.right||game.input.up)this.visible=false;
    	else this.visible=true;
    };
    s.addChild(s.minigakuhu);

    s.miniken=new Sprite(30,30);
    s.miniken.image=new Surface(30,30);
    for(var i=0;i<3;i++){
    	s.miniken.image.context.fillStyle="white";
    	s.miniken.image.context.fillRect(i*9,0,9,29);
    	s.miniken.image.context.strokeRect(i*9,0,9,29);
    }
    for(var i=0;i<2;i++){
    	s.miniken.image.context.fillStyle="black";
    	s.miniken.image.context.fillRect(i*9+5,0,7,15);
    }
    s.miniken.x=50;
    s.miniken.y=50;
    s.miniken.onenterframe=function(){
    	if(game.input.down||game.input.left||game.input.right||game.input.up)this.visible=false;
    	else this.visible=true;
    };
    s.addChild(s.miniken);

    s.mswin=WindowCreator(0,320-111,320,110);
    s.addChild(s.mswin);
    s.mswin.visible=false;
    s.mscount=0;
    s.mst=new Label();
    s.mst.width=300;
    s.mst.x=5;
    s.mst.y=320-105;
    s.addChild(s.mst);

    FieldMagicList(s);
};

//枠を作る
var WindowCreator=function(x,y,width,height){
	c=new Sprite(width+1,height+1);
    c.image=new Surface(width+10,height+10);
    c.x=x;
    c.y=y;
    c.image.context.fillStyle="black";
    c.image.context.strokeStyle="white";
    c.image.context.lineWidth=3;
    RoundRect(c.image, 0, 0, width, height, 10, 1);
    RoundRect(c.image, 0, 0, width, height, 10, 0);
    return c;
};

//角丸
var RoundRect= function(canvas, x, y, width, height, radius, isFill) {
    var l = x + radius;
    var r = x + width - radius;
    var t = y + radius;
    var b = y + height - radius;

    canvas.context.beginPath();
    canvas.context.arc(l, t, radius,     -Math.PI, -Math.PI*0.5, false);  // 左上
    canvas.context.arc(r, t, radius, -Math.PI*0.5,            0, false);  // 右上
    canvas.context.arc(r, b, radius,            0,  Math.PI*0.5, false);  // 右下
    canvas.context.arc(l, b, radius,  Math.PI*0.5,      Math.PI, false);  // 左下
    canvas.context.closePath();
    if(isFill)canvas.context.fill();else canvas.context.stroke();
};


window.onload = function() {
    game = new Game();
    game.fps=30;
	game.input.touch={};
	game.preload("piano/do1.mp3",
		"piano/do1s.mp3",
		"piano/re.mp3",
		"piano/res.mp3",
		"piano/mi.mp3",
		"piano/fa.mp3",
		"piano/fas.mp3",
		"piano/so.mp3",
		"piano/sos.mp3",
		"piano/ra.mp3",
		"piano/ras.mp3",
		"piano/si.mp3",
		"piano/do2.mp3",
		"images/chara0.png",
		"images/map1.png");
    game.onload = function() {
	var scene = game.rootScene;

	/*
	 *鍵盤
	 */
	Kenbans= {
            do1:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            do1s:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            re:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            res:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            mi:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            fa:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            fas:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            so:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            sos:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            ra:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            ras:new Sprite(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2),
            si:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            do2:new Sprite(SPRITE_WIDTH, SPRITE_HEIGHT),
            name:["do1","re","mi","fa","so","ra","si","do2"],
            names:["do1s","res","","fas","sos","ras"],
            namej:["ド↓","レ","ミ","ファ","ソ","ラ","シ","ド↑"],
            namesj:["ド♯","レ♯","","ファ♯","ソ♯","ラ♯"],
            n:[],
            nn:["do1","do1s","re","res","mi","fa","fas","so","sos","ra","ras","si","do2"]
        };

	for(var i=0;i<8;i++){
        sprite=Kenbans[Kenbans.name[i]];
        sprite.image = new Surface(SPRITE_WIDTH+1, SPRITE_HEIGHT+1);
        // canvas 描画
        sprite.image.context.fillStyle = "white";
        sprite.image.context.fillRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
        sprite.image.context.lineWidth=4;
        sprite.image.context.strokeStyle = "black";
        sprite.image.context.strokeRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);

        sprite.x=i*SPRITE_WIDTH;
        sprite.y=SPRITE_HEIGHT*2;
        sprite.otoname=Kenbans.namej[i];
        sprite.sepath=SE_PATH[Kenbans.name[i]];
        sprite.ontouchstart=function(){
            this.image.context.fillStyle = "blue";
            this.image.context.fillRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
            this.image.context.strokeRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
        	game.assets[this.sepath].clone().play();
        	ensou[ensou.length]=this.number;
        	for(var i=0;i<gakuhus.length;i++){
        		for(var j=0;j<ensou.length-gakuhus[i].s.length+1;j++){
        			if(ensou.slice(j,j+gakuhus[i].s.length).join()===gakuhus[i].s.join()){
        				isMagicActive[i]=true;
        			}
        		}
        	}
        };

        sprite.ontouchend=function(){
            this.image.context.fillStyle = "white";
            this.image.context.fillRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
            this.image.context.strokeRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
        };

        sprite.setRed=function(){
            this.image.context.fillStyle = "red";
            this.image.context.fillRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
            this.image.context.strokeRect(0, 0, SPRITE_WIDTH, SPRITE_HEIGHT);
        }
    }
    for(var i=0;i<7;i++){
        if(Kenbans.names[i]){
            sprite=Kenbans[Kenbans.names[i]];
            sprite.image =  new Surface(SPRITE_WIDTH, ~~SPRITE_HEIGHT/2);

            // canvas 描画
            sprite.image.context.fillStyle = "black";
            sprite.image.context.fillRect(~~SPRITE_WIDTH*0.1, 0, SPRITE_WIDTH*0.8, ~~SPRITE_HEIGHT/2);

            sprite.x=i*SPRITE_WIDTH+SPRITE_WIDTH/2;
            sprite.y=SPRITE_HEIGHT*2;
            sprite.otoname=Kenbans.namesj[i];
            sprite.sepath=SE_PATH[Kenbans.names[i]];
            sprite.ontouchstart=function(){
            	this.image.context.fillStyle="teal";
            	this.image.context.fillRect(~~SPRITE_WIDTH*0.1, 0, SPRITE_WIDTH*0.8, ~~SPRITE_HEIGHT/2);
            	game.assets[this.sepath].clone().play();
            	ensou[ensou.length]=this.number;
            	//すべての楽譜に対して演奏があってるか判定
            	for(var i=0;i<gakuhus.length;i++){
            		for(var j=0;j<ensou.length-gakuhus[i].s.length+1;j++){
            			if(ensou.slice(j,j+gakuhus[i].s.length).join()===gakuhus[i].s.join()){
            				isMagicActive[i]=true;
            			}
            		}
            	}
            };
            sprite.ontouchend=function(){
            	this.image.context.fillStyle="black";
            	this.image.context.fillRect(~~SPRITE_WIDTH*0.1, 0, SPRITE_WIDTH*0.8, ~~SPRITE_HEIGHT/2);
            };

            sprite.setRed=function(){
            	this.image.context.fillStyle="maroon";
            	this.image.context.fillRect(~~SPRITE_WIDTH*0.1, 0, SPRITE_WIDTH*0.8, ~~SPRITE_HEIGHT/2);
            }
        }
    }
    for(var i=0;i<13;i++){
    	Kenbans.n[i]=Kenbans[Kenbans.nn[i]];
    	Kenbans.n[i].number=i;
    }
    game.replaceScene(TitleScene());

    };


    game.start();
};